openapi: 3.0.0
info:
  title: Instant Loans
  description: This is a service to get instant loans.
  version: 1.0.0
servers:
  - url: https://loans.swagger.io/v1
  - url: http://loans.swagger.io/v1
tags:
  - name: user
    description: User entity.
  - name: loan
    description: Loan entity.
  - name: payment
    description: Payment entity.
components:
  schemas:
    userInformation:
      required:
        - phone
        - password
        - firstName
        - lastName
        - age
        - monthlyEarnings
        - occupation
      type: object
      properties:
        userId:
          type: integer
        phone:
          type: string
          example: +380630101010
        password:
          type: string
          example: qwerty123
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        age:
          type: integer
          example: 20
          minimum: 18
          maximum: 150
        monthlyEarnings:
          type: integer
          example: 20000
        occupation:
          type: string
          example: student
    user:
      type: object
      properties:
        userId:
          type: integer
        loansCount:
          type: integer
          example: 1
        loans:
          type: array
          items:
            type: integer
          example:
            - 1
            - 1243
            - 1234142
    loan:
      required:
        - loanId
        - amount
        - isPaid
        - createdDate
        - months
      type: object
      properties:
        loanId:
          type: integer
          example: 1
          minimum: 1
        amount:
          type: integer
          example: 1000
        isPaid:
          type: boolean
          default: false
          example: false
        createdDate:
          type: string
          example: 1633899108
        months:
          type: integer
          example: 12
        userId:
          type: integer
        payments:
          type: array
          items:
            type: integer
          example:
            - 1
            - 2
            - 3
    payment:
      required:
        - paymentId
        - amount
        - paidDate
      type: object
      properties:
        paymentId:
          type: integer
          example: 1
        amount:
          type: integer
          example: 1000
        paidDate:
          type: string
          example: 1633899108
        loanId:
          type: integer

  securitySchemes:
    api_key:
      type: apiKey
      description: API authentication key.
      name: api_key
      in: query

paths:
  /user:
    post:
      tags:
        - user
      summary: Creates new user.
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/userInformation'
        required: true
      responses:
        201:
          description: User was successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                    example: 1
        400:
          description: Invalid parameters.
          content: { }
        409:
          description: User with this username already exists.
          content: { }
  /user/login:
    get:
      tags:
        - user
      summary: User login.
      parameters:
        - name: phone
          in: query
          description: The phone for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully authenticated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                    example: 1
                  api_key:
                    type: string
                    example: e01aeee900fbb47110521ea1516b3e976173baf8200c907e734efea845e3f29c
        401:
          description: Incorrect auth credentials.
          content: { }
        404:
          description: Username not found.
          content: { }
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session.
      responses:
        default:
          description: Successful operation.
          content: { }
  /user/{userId}:
    get:
      tags:
        - user
      summary: Returns user summary.
      parameters:
        - name: userId
          in: path
          description: The user id.
          required: true
          schema:
            minimum: 1
            type: integer
      responses:
        200:
          description: The user information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        400:
          description: Invalid userId.
          content: { }
        404:
          description: User with specified userId not found.
          content: { }
    delete:
      tags:
        - user
      summary: Deletes a user.
      parameters:
        - name: userId
          in: path
          description: The userId of the user that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        400:
          description: Invalid userId.
          content: { }
        404:
          description: User not found.
          content: { }
      security:
        - api_key: [ ]

  /loan:
    post:
      tags:
        - loan
      summary: Creates new loan.
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/loan'
      responses:
        201:
          description: Loan was successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  loanId:
                    type: integer
                    example: 1
        400:
          description: Invalid parameters.
          content: { }
  /loan/{loanId}:
    get:
      tags:
        - loan
      summary: Returns loan inforamtion.
      parameters:
        - name: loanId
          in: path
          description: The loan id.
          required: true
          schema:
            minimum: 1
            type: integer
      responses:
        200:
          description: The loan information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loan'
        400:
          description: Invalid loanId.
          content: { }
        404:
          description: Loan with specified loanId not found.
          content: { }
  /pay/{loanId}:
    post:
      tags:
        - payment
      summary: Repays the loan.
      parameters:
        - name: loanId
          in: path
          description: The loan id.
          required: true
          schema:
            minimum: 1
            type: integer
        - name: amount
          in: query
          description: The amount of payment.
          required: true
          schema:
            minimum: 1
            type: integer
      responses:
        200:
          description: The loan is successfully repaid.
          content: { }
        400:
          description: Invalid loanId.
          content: { }
        404:
          description: Loan with specified loanId not found.
          content: { }
    get:
      tags:
        - payment
      summary: Returns information about repays.
      parameters:
        - name: loanId
          in: path
          description: The loan id.
          required: true
          schema:
            minimum: 1
            type: integer
      responses:
        200:
          description: The user information.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/payment'
        400:
          description: Invalid userId.
          content: { }
        404:
          description: User with specified userId not found.
          content: { }
